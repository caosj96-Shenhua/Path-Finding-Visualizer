{"version":3,"sources":["PathfindingVisualizer/Board/BoardTest.js","PathfindingVisualizer/Node/NodeTest.js","PathfindingVisualizer/Node/Node.jsx","Algorithms/Dijkstra.js","Algorithms/Dfs.js","Algorithms/astar.js","PathfindingVisualizer/Board/board.js","Maze/simpleMaze.js","Maze/recursiveMaze.js","Maze/horizontalMaze.js","Maze/verticalMaze.js","PathfindingVisualizer/PathfindingVisualizer.jsx","PathfindingVisualizer/TestBoard.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","require","Board","this","height","width","start","target","object","boardArray","nodes","nodesToAnimate","wallsToAnimate","pressedNodeStatus","previouslyPressedNodeStatus","previouslySwitchedNode","previouslySwitchedNodeWeight","keyDown","algoDone","speed","prototype","initialise","createGrid","r","currentArrayRow","currentHTMLRow","c","newNode","newNodeId","newNodeClass","Math","floor","push","document","getElementById","getNode","id","coordinates","split","parseInt","module","exports","status","previousNode","path","direction","storedDirection","distance","Infinity","totalDistance","heuristicDistance","weight","relatesToObject","overwriteObjectRelation","otherid","otherstatus","otherpreviousNode","otherpath","otherdirection","otherstoredDirection","otherdistance","otherweight","otherrelatesToObject","otheroverwriteObjectRelation","props","state","row","col","isFinish","isStart","isVisited","isWall","onMouseDown","onMouseEnter","onMouseUp","extraClassName","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","unvisitedNodes","node","getAllNodes","length","sortNodesByDistance","closestNode","shift","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","dfs","nodeOne","nodeTwo","currentCoordinates","targetCoordinates","x1","y1","x2","y2","console","log","getDistance","unshift","astar","closestNodefunc","updateNeighbors","currentClosest","index","i","splice","manhattanDistance","distanceToCompare","nodeOneCoordinates","map","ele","nodeTwoCoordinates","xOne","xTwo","yOne","yTwo","abs","createNode","vw","max","documentElement","clientWidth","window","innerWidth","vh","min","clientHeight","innerHeight","getNewGridWithWalToggled","newGrid","slice","simpleMaze","random","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","START_NODE_ROW","START_NODE_COL","mouseIsPressed","VISIT_SPEED","PATH_SPEED","currentRow","getInitialGrid","setState","nodesInShortestPathOrder","setTimeout","animateShortestPath","currentNode","getNodesInShortestPathOrder","animateDijkstra","animateDfs","getNodesInShortestAstar","animateAstar","animateMaze","wallAnimate","recursiveMaze","rowStart","rowEnd","colStart","colEnd","orientation","surroundingWalls","possibleRows","number","possibleCols","randomRowIndex","randomColIndex","colRandom","currentCol","rowRandom","horizontalMaze","verticalMaze","clearPath","clearWall","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","onClick","location","reload","Toggle","aria-controls","Collapse","Nav","Link","visualizeDijkstra","visualizeAstar","NavDropdown","title","Item","visualizeMaze","visualizeRecursiveMaze","visualizeVerticalMaze","visualizeHorizontalMaze","Divider","eventKey","disabled","value","step","tooltipPlacement","tooltip","reverse","size","onChange","changeEvent","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5633e24d.chunk.js","sourcesContent":["const Node = require(\"../Node/NodeTest\");\n\nfunction Board(/*height, width*/) {\n    this.height = 100;\n    this.width = 100;\n    this.start = null;\n    this.target = null;\n    this.object = null;\n    this.boardArray = [];\n    this.nodes = {};\n    this.nodesToAnimate = [];\n    //   this.objectNodesToAnimate = [];\n    //   this.shortestPathNodesToAnimate = [];\n    //    this.objectShortestPathNodesToAnimate = [];\n    this.wallsToAnimate = [];\n    //    this.mouseDown = false;\n    this.pressedNodeStatus = \"normal\";\n    this.previouslyPressedNodeStatus = null;\n    this.previouslySwitchedNode = null;\n    this.previouslySwitchedNodeWeight = 0;\n    this.keyDown = false;\n    this.algoDone = false;\n    //    this.currentAlgorithm = null;\n    //    this.currentHeuristic = null;\n    //    this.numberOfObjects = 0;\n    //    this.isObject = false;\n    //    this.buttonsOn = false;\n    this.speed = \"fast\";\n}\n\nBoard.prototype.initialise = function () {\n    this.createGrid();\n    //    this.addEventListeners();\n    //   this.toggleTutorialButtons();\n};\n\nBoard.prototype.createGrid = function () {\n    let tableHTML = \"\";\n    for (let r = 0; r < this.height; r++) {\n        let currentArrayRow = [];\n        let currentHTMLRow = `<tr id=\"row ${r}\">`;\n        for (let c = 0; c < this.width; c++) {\n            let newNodeId = `${r}-${c}`, newNodeClass, newNode;\n            if (r === Math.floor(this.height / 2) && c === Math.floor(this.width / 4)) {\n                newNodeClass = \"start\";\n                this.start = `${newNodeId}`;\n            } else if (r === Math.floor(this.height / 2) && c === Math.floor(3 * this.width / 4)) {\n                newNodeClass = \"target\";\n                this.target = `${newNodeId}`;\n            } else {\n                newNodeClass = \"unvisited\";\n            }\n            newNode = new Node(newNodeId, newNodeClass);\n            currentArrayRow.push(newNode);\n            currentHTMLRow += `<td id=\"${newNodeId}\" class=\"${newNodeClass}\"></td>`;\n            this.nodes[`${newNodeId}`] = newNode;\n        }\n        this.boardArray.push(currentArrayRow);\n        tableHTML += `${currentHTMLRow}</tr>`;\n    }\n    let board = document.getElementById(\"board\");\n    //  board.innerHTML = tableHTML;\n};\n\nBoard.prototype.getNode = function (id) {\n    let coordinates = id.split(\"-\");\n    let r = parseInt(coordinates[0]);\n    let c = parseInt(coordinates[1]);\n    return this.boardArray[r][c];\n};\n\nlet height = 100;//Math.floor(($(document).height()) / 28);\nlet width = 100;//Math.floor($(document).width() / 25);\nlet newBoard = new Board(height, width)\nnewBoard.initialise();","function Node(id, status) {\n    this.id = id;\n    this.status = status;\n    this.previousNode = null;\n    this.path = null;\n    this.direction = null;\n    this.storedDirection = null;\n    this.distance = Infinity;\n    this.totalDistance = Infinity;\n    this.heuristicDistance = null;\n    this.weight = 0;\n    this.relatesToObject = false;\n    this.overwriteObjectRelation = false;\n\n    this.otherid = id;\n    this.otherstatus = status;\n    this.otherpreviousNode = null;\n    this.otherpath = null;\n    this.otherdirection = null;\n    this.otherstoredDirection = null;\n    this.otherdistance = Infinity;\n    this.otherweight = 0;\n    this.otherrelatesToObject = false;\n    this.otheroverwriteObjectRelation = false;\n}\n\nmodule.exports = Node;","import React, { Component } from 'react';\nimport './Node.css';\n\nexport default class Node extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n    render() {\n        const { row, col, isFinish, isStart, isVisited, isWall, onMouseDown, onMouseEnter, onMouseUp, } = this.props;\n        const extraClassName = isFinish\n            ? 'node-finish'\n            : isStart\n                ? 'node-start'\n                : isVisited\n                    ? 'node-visited'\n                    : isWall\n                        ? 'node-wall'\n                        : '';\n\n        return (<div\n            id={`${row}-${col}`}\n            className={`node ${extraClassName}`}\n            onMouseDown={() => onMouseDown(row, col)}\n            onMouseEnter={() => onMouseEnter(row, col)}\n            //   onMouseStartEnter={() => onMouseEnter(isStart)}\n            onMouseUp={() => onMouseUp()}\n        ></div>);\n    }\n}","\nexport function dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    if (!startNode || !finishNode || startNode === finishNode) {\n        return false;\n    }\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n        if (closestNode.isWall) continue;\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}\n","\n\nexport function dfs(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    if (!startNode || !finishNode || startNode === finishNode) {\n        return false;\n    }\n    startNode.distance = 0;\n    startNode.totalDistance = 0;\n    startNode.direction = \"up\";\n    const unvisitedNodes = getAllNodes(grid);//  print out \n    //  let exploredNodes = { startNode: true };\n    // var maxDistnce = 0;\n    const distance = getDistance(startNode, finishNode);\n    console.log(distance);\n    while (!!unvisitedNodes.length) {\n\n        /*\n        if (closestNode.distance > maxDistnce && !closestNode.isVisited) {\n            maxDistnce = closestNode.distance;\n            visitedNodesInOrder.push(closestNode);\n            //    console.log(closestNode.row);\n            // console.log(finishNode.col)\n        } else {\n        }\n        */\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n\n        // If the closest node is at a distance of infinity,\n        // we must be trapped and should therefore stop.\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n    // return visitedNodesInOrder;\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n    //console.log(neighbors);\n\n}\n/*\nfunction updateNeighbors2(node, grid) {\n    const neighbors = getNeighbors2(node, grid);\n    for (const neighbor of neighbors) {\n        neighbor.distance = node.distance + 1;\n        //   neighbor.previousNode = node;\n    }\n}\n*/\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n\n    if (row > 0) neighbors.unshift(grid[row - 1][col]); //working\n    if (col < grid[0].length - 1) neighbors.unshift(grid[row][col + 1]);\n\n    // if (grid[row][col + 1]) neighbors.unshift(grid[row][col + 1]);\n    if (row < grid.length - 1) neighbors.unshift(grid[row + 1][col]);\n\n    // if (grid[row + 1] && grid[row + 1][col]) neighbors.unshift(grid[row + 1][col]);\n\n\n    if (col > 0) neighbors.unshift(grid[row][col - 1]); //working\n\n    //   console.log(neighbors);\n\n    return neighbors;//.filter(neighbor => !neighbor.isVisited);\n}\n/*\nfunction getNeighbors2(node, grid) {\n    const neighbors = getNeighbors(node, grid);\n    //    const neighbors = [];\n\n    const { col, row } = node;\n\n    if (col < grid[0].length - 1) neighbors.unshift(grid[row][col + 1]);\n    console.log(neighbors);\n\n    return neighbors;\n}\n*/\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const col of row) {\n            nodes.push(col);\n        }\n    }\n    return nodes;\n}\n/*\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}\n*/\n\nfunction getDistance(nodeOne, nodeTwo) {\n    let currentCoordinates = nodeOne.id.split(\"-\");\n    let targetCoordinates = nodeTwo.id.split(\"-\");\n    let x1 = parseInt(currentCoordinates[0]);\n    let y1 = parseInt(currentCoordinates[1]);\n    let x2 = parseInt(targetCoordinates[0]);\n    let y2 = parseInt(targetCoordinates[1]);\n    console.log(x1);\n\n    if (x2 < x1) {\n        if (nodeOne.direction === \"up\") {\n            return [1, [\"f\"], \"up\"];\n        } else if (nodeOne.direction === \"right\") {\n            return [2, [\"l\", \"f\"], \"up\"];\n        } else if (nodeOne.direction === \"left\") {\n            return [2, [\"r\", \"f\"], \"up\"];\n        } else if (nodeOne.direction === \"down\") {\n            return [3, [\"r\", \"r\", \"f\"], \"up\"];\n        }\n    } else if (x2 > x1) {\n        if (nodeOne.direction === \"up\") {\n            return [3, [\"r\", \"r\", \"f\"], \"down\"];\n        } else if (nodeOne.direction === \"right\") {\n            return [2, [\"r\", \"f\"], \"down\"];\n        } else if (nodeOne.direction === \"left\") {\n            return [2, [\"l\", \"f\"], \"down\"];\n        } else if (nodeOne.direction === \"down\") {\n            return [1, [\"f\"], \"down\"];\n        }\n    }\n    if (y2 < y1) {\n        if (nodeOne.direction === \"up\") {\n            return [2, [\"l\", \"f\"], \"left\"];\n        } else if (nodeOne.direction === \"right\") {\n            return [3, [\"l\", \"l\", \"f\"], \"left\"];\n        } else if (nodeOne.direction === \"left\") {\n            return [1, [\"f\"], \"left\"];\n        } else if (nodeOne.direction === \"down\") {\n            return [2, [\"r\", \"f\"], \"left\"];\n        }\n    } else if (y2 > y1) {\n        if (nodeOne.direction === \"up\") {\n            return [2, [\"r\", \"f\"], \"right\"];\n        } else if (nodeOne.direction === \"right\") {\n            return [1, [\"f\"], \"right\"];\n        } else if (nodeOne.direction === \"left\") {\n            return [3, [\"r\", \"r\", \"f\"], \"right\"];\n        } else if (nodeOne.direction === \"down\") {\n            return [2, [\"l\", \"f\"], \"right\"];\n        }\n    }\n}","export function astar(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    if (!startNode || !finishNode || startNode === finishNode) {\n        return false;\n    }\n    startNode.distance = 0;\n    startNode.totalDistance = 0;\n    startNode.direction = \"up\";\n    const unvisitedNodes = getAllNodes(grid);\n\n    while (!!unvisitedNodes.length) {\n\n        var closestNode = closestNodefunc(unvisitedNodes)\n        //   if (closestNode.isWall) continue;\n\n        while (closestNode.isWall && unvisitedNodes.length) {\n            closestNode = closestNodefunc(unvisitedNodes)\n        }\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateNeighbors(grid, closestNode, finishNode)\n    }\n}\n\nfunction closestNodefunc(unvisitedNodes) {\n    let currentClosest, index;\n    for (let i = 0; i < unvisitedNodes.length; i++) {\n        if (!currentClosest || currentClosest.totalDistance > unvisitedNodes[i].totalDistance) {\n            currentClosest = unvisitedNodes[i];\n            index = i;\n        } else if (currentClosest.totalDistance === unvisitedNodes[i].totalDistance) {\n            if (currentClosest.heuristicDistance > unvisitedNodes[i].heuristicDistance) {\n                currentClosest = unvisitedNodes[i];\n                index = i;\n            }\n        }\n    }\n    unvisitedNodes.splice(index, 1);\n    return currentClosest;\n}\n\n/*\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    // console.log(unvisitedNeighbors);\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n    //console.log(neighbors);\n}\n*/\n\nfunction updateNeighbors(grid, node, finishNode) {\n    let neighbors = getUnvisitedNeighbors(node, grid);\n    for (let neighbor of neighbors) {\n        if (finishNode) {\n            let distance = getDistance(node, neighbor);\n            if (!neighbor.heuristicDistance) neighbor.heuristicDistance = manhattanDistance(neighbor, finishNode);\n            let distanceToCompare = node.distance + /*neighbor.weightweight*/ + distance[0];//need to reset distance\n            if (distanceToCompare < neighbor.distance) {\n                neighbor.distance = distanceToCompare;\n                neighbor.totalDistance = neighbor.distance + neighbor.heuristicDistance;\n                neighbor.previousNode = node;\n                neighbor.path = distance[1];\n                neighbor.direction = distance[2];\n            }\n        }\n    }\n}\n\n\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n\n    if (row > 0) neighbors.unshift(grid[row - 1][col]); //working\n    if (col < grid[0].length - 1) neighbors.unshift(grid[row][col + 1]);\n    if (row < grid.length - 1) neighbors.unshift(grid[row + 1][col]);\n    if (col > 0) neighbors.unshift(grid[row][col - 1]); //working\n\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const col of row) {\n            nodes.push(col);\n        }\n    }\n    return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\nexport function getNodesInShortestAstar(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}\n\n\nfunction getDistance(nodeOne, nodeTwo) {\n    let currentCoordinates = nodeOne.id.split(\"-\");\n    let targetCoordinates = nodeTwo.id.split(\"-\");\n    let x1 = parseInt(currentCoordinates[0]);\n    let y1 = parseInt(currentCoordinates[1]);\n    let x2 = parseInt(targetCoordinates[0]);\n    let y2 = parseInt(targetCoordinates[1]);\n\n    if (x2 < x1) {\n        if (nodeOne.direction === \"up\") {\n            return [1, [\"f\"], \"up\"];\n        } else if (nodeOne.direction === \"right\") {\n            return [2, [\"l\", \"f\"], \"up\"];\n        } else if (nodeOne.direction === \"left\") {\n            return [2, [\"r\", \"f\"], \"up\"];\n        } else if (nodeOne.direction === \"down\") {\n            return [3, [\"r\", \"r\", \"f\"], \"up\"];\n        }\n    } else if (x2 > x1) {\n        if (nodeOne.direction === \"up\") {\n            return [3, [\"r\", \"r\", \"f\"], \"down\"];\n        } else if (nodeOne.direction === \"right\") {\n            return [2, [\"r\", \"f\"], \"down\"];\n        } else if (nodeOne.direction === \"left\") {\n            return [2, [\"l\", \"f\"], \"down\"];\n        } else if (nodeOne.direction === \"down\") {\n            return [1, [\"f\"], \"down\"];\n        }\n    }\n    if (y2 < y1) {\n        if (nodeOne.direction === \"up\") {\n            return [2, [\"l\", \"f\"], \"left\"];\n        } else if (nodeOne.direction === \"right\") {\n            return [3, [\"l\", \"l\", \"f\"], \"left\"];\n        } else if (nodeOne.direction === \"left\") {\n            return [1, [\"f\"], \"left\"];\n        } else if (nodeOne.direction === \"down\") {\n            return [2, [\"r\", \"f\"], \"left\"];\n        }\n    } else if (y2 > y1) {\n        if (nodeOne.direction === \"up\") {\n            return [2, [\"r\", \"f\"], \"right\"];\n        } else if (nodeOne.direction === \"right\") {\n            return [1, [\"f\"], \"right\"];\n        } else if (nodeOne.direction === \"left\") {\n            return [3, [\"r\", \"r\", \"f\"], \"right\"];\n        } else if (nodeOne.direction === \"down\") {\n            return [2, [\"l\", \"k\"], \"right\"];\n        }\n    }\n}\n\n\nfunction manhattanDistance(nodeOne, nodeTwo) {\n    let nodeOneCoordinates = nodeOne.id.split(\"-\").map(ele => parseInt(ele));\n    let nodeTwoCoordinates = nodeTwo.id.split(\"-\").map(ele => parseInt(ele));\n    let xOne = nodeOneCoordinates[0];\n    let xTwo = nodeTwoCoordinates[0];\n    let yOne = nodeOneCoordinates[1];\n    let yTwo = nodeTwoCoordinates[1];\n\n    let xChange = Math.abs(xOne - xTwo);\n    let yChange = Math.abs(yOne - yTwo);\n\n    return (xChange + yChange);\n}","import React, { Component } from 'react';\nimport '../PathfindingVisualizer.css';\n\nconst rowNumber = 25;\nconst colNumber = 40;\n\nexport function getInitialGrid(height, width) {\n    const grid = [];\n    let tableHTML = \"\";\n    for (let row = 0; row < height; row++) {\n        const currentRow = [];\n        let currentHTMLRow = `<tr id=\"row ${row}\">`;\n        for (let col = 0; col < width; col++) {\n            currentRow.push(createNode(col, row));\n            currentHTMLRow += `<td id=\"${createNode(col, row)}\"></td>`;\n\n        }\n        grid.push(currentRow);\n        tableHTML += `${currentHTMLRow}</tr>`;\n    }\n    let board = document.getElementById(\"grid\");\n    //  board.innerHTML = tableHTML;\n    return grid;\n    // return tableHTML;\n}\n\n\nexport function createNode(col, row) {\n\n    const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)\n    const vh = Math.min(document.documentElement.clientHeight || 0, window.innerHeight || 0)\n    let height = Math.floor(vh / 28) - 8;\n    let width = Math.floor(vw / 25);\n    const START_NODE_ROW = 5;\n    const START_NODE_COL = 5;\n    //   const FINISH_NODE_ROW = 20;\n    //   const FINISH_NODE_COL = 35; \n    const FINISH_NODE_ROW = height - 6;\n    const FINISH_NODE_COL = width - 6;\n\n    return {\n        col,\n        row,\n        id: row + '-' + col,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        direction: null,\n        distance: Infinity,\n        totalDistance: Infinity,\n        heuristicDistance: null,\n        weight: 0,\n        isVisited: false,\n        isWall: false,\n        previousNode: null,\n    }\n\n}\n\n\nexport function getNewGridWithWalToggled(grid, row, col) {\n    const newGrid = grid.slice(0);\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n};\n\nexport function getNewGridWithStartToggled(grid, row, col) {\n    const newGrid = grid.slice(0);\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isStart: !node.isStart,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n\n}\n\n\n","export function simpleMaze(grid) {\n    const wallsToAnimate = [];\n    const unvisitedNodes = getAllNodes(grid);\n    unvisitedNodes.sort(() => Math.random() - 0.5).splice(0, unvisitedNodes.length / 1.4);\n    //   unvisitedNodes = unvisitedNodes.splice(0, unvisitedNodes.length / 2);\n\n    while (unvisitedNodes.length) {\n        const closestNode = unvisitedNodes.shift();\n        if (!closestNode.isStart && !closestNode.isFinish) {\n            closestNode.isWall = true;\n            wallsToAnimate.push(closestNode);\n        }\n    }\n    //   const halfArray = wallsToAnimate.splice(0, wallsToAnimate.length / 2)\n    // wallsToAnimate.sort(() => Math.random() - 0.5);\n    //   const halfArray = wallsToAnimate.splice(0, wallsToAnimate.length / 2);\n    return wallsToAnimate;\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}","export function recursiveMaze(grid, rowStart, rowEnd, colStart, colEnd, orientation, surroundingWalls, wallsToAnimate) {\n    // const wallsToAnimate = [];\n\n    if (rowEnd < rowStart || colEnd < colStart) {\n        return wallsToAnimate;\n    }\n\n    if (!surroundingWalls) {\n        const unvisitedNodes = getAllNodes(grid);\n        while (unvisitedNodes.length) {\n            const closestNode = unvisitedNodes.shift();\n            const r = parseInt(closestNode.id.split(\"-\")[0]);\n            const c = parseInt(closestNode.id.split(\"-\")[1]);\n            if (r === 0 || c === 0 || c === grid[0].length - 1 || r === grid.length - 1) {\n                //   let currentNode = document.getElementById(closestNode);\n                //   wallsToAnimate.push(currentNode);\n                closestNode.isWall = true;\n                wallsToAnimate.push(closestNode);\n            }\n\n\n        }\n        surroundingWalls = true;\n    }\n    if (orientation === \"horizontal\") {\n        const possibleRows = [];\n        for (let number = rowStart; number <= rowEnd; number += 2) {\n            possibleRows.push(number);\n        }\n        const possibleCols = [];\n        for (let number = colStart - 1; number <= colEnd + 1; number += 2) {\n            possibleCols.push(number);\n        }\n        const randomRowIndex = Math.floor(Math.random() * possibleRows.length);\n        const randomColIndex = Math.floor(Math.random() * possibleCols.length);\n        const currentRow = possibleRows[randomRowIndex];\n        const colRandom = possibleCols[randomColIndex];\n        const unvisitedNodes = getAllNodes(grid);\n        while (unvisitedNodes.length) {\n            const closestNode = unvisitedNodes.shift();\n            const r = parseInt(closestNode.id.split(\"-\")[0]);\n            const c = parseInt(closestNode.id.split(\"-\")[1]);\n            if (r === currentRow && c !== colRandom && c >= colStart - 1 && c <= colEnd + 1) {\n                if (!closestNode.isStart && !closestNode.isFinish) {\n                    closestNode.isWall = true;\n                    wallsToAnimate.push(closestNode);\n                }\n\n            }\n        }\n        if (currentRow - 2 - rowStart > colEnd - colStart) {\n            recursiveMaze(grid, rowStart, currentRow - 2, colStart, colEnd, orientation, surroundingWalls, wallsToAnimate);\n        } else {\n            recursiveMaze(grid, rowStart, currentRow - 2, colStart, colEnd, \"vertical\", surroundingWalls, wallsToAnimate)\n        }\n        if (rowEnd - (currentRow + 2) > colEnd - colStart) {\n            recursiveMaze(grid, currentRow + 2, rowEnd, colStart, colEnd, orientation, surroundingWalls, wallsToAnimate);\n        } else {\n            recursiveMaze(grid, currentRow + 2, rowEnd, colStart, colEnd, \"vertical\", surroundingWalls, wallsToAnimate);\n        }\n    } else {// if (orientation === \"vertical\") {\n        const possibleCols = [];\n        for (let number = colStart; number <= colEnd; number += 2) {\n            possibleCols.push(number);\n        }\n        const possibleRows = [];\n        for (let number = rowStart - 1; number <= rowEnd + 1; number += 2) {\n            possibleRows.push(number);\n        }\n        const randomColIndex = Math.floor(Math.random() * possibleCols.length);\n        const randomRowIndex = Math.floor(Math.random() * possibleRows.length);\n        const currentCol = possibleCols[randomColIndex];\n        const rowRandom = possibleRows[randomRowIndex];\n        const unvisitedNodes = getAllNodes(grid);\n        while (unvisitedNodes.length) {\n            const closestNode = unvisitedNodes.shift();\n            const r = parseInt(closestNode.id.split(\"-\")[0]);\n            const c = parseInt(closestNode.id.split(\"-\")[1]);\n            if (c === currentCol && r !== rowRandom && r >= rowStart - 1 && r <= rowEnd + 1) {\n                if (!closestNode.isStart && !closestNode.isFinish) {\n                    closestNode.isWall = true;\n                    wallsToAnimate.push(closestNode);\n                }\n            }\n        }\n        if (rowEnd - rowStart > currentCol - 2 - colStart) {\n            recursiveMaze(grid, rowStart, rowEnd, colStart, currentCol - 2, \"horizontal\", surroundingWalls, wallsToAnimate);\n        } else {\n            recursiveMaze(grid, rowStart, rowEnd, colStart, currentCol - 2, orientation, surroundingWalls, wallsToAnimate);\n        }\n        if (rowEnd - rowStart > colEnd - (currentCol + 2)) {\n            recursiveMaze(grid, rowStart, rowEnd, currentCol + 2, colEnd, \"horizontal\", surroundingWalls, wallsToAnimate);\n        } else {\n            recursiveMaze(grid, rowStart, rowEnd, currentCol + 2, colEnd, orientation, surroundingWalls, wallsToAnimate);\n        }\n    }\n\n    return wallsToAnimate;\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}","export function horizontalMaze(grid, rowStart, rowEnd, colStart, colEnd, orientation, surroundingWalls, wallsToAnimate) {\n    // const wallsToAnimate = [];\n\n    if (rowEnd < rowStart || colEnd < colStart) {\n        return wallsToAnimate;\n    }\n\n    if (!surroundingWalls) {\n        const unvisitedNodes = getAllNodes(grid);\n        while (unvisitedNodes.length) {\n            const closestNode = unvisitedNodes.shift();\n            const r = parseInt(closestNode.id.split(\"-\")[0]);\n            const c = parseInt(closestNode.id.split(\"-\")[1]);\n            if (r === 0 || c === 0 || c === grid[0].length - 1 || r === grid.length - 1) {\n                //   let currentNode = document.getElementById(closestNode);\n                //   wallsToAnimate.push(currentNode);\n                closestNode.isWall = true;\n                wallsToAnimate.push(closestNode);\n            }\n\n\n        }\n        surroundingWalls = true;\n    }\n    if (orientation === \"horizontal\") {\n        const possibleRows = [];\n        for (let number = rowStart; number <= rowEnd; number += 2) {\n            possibleRows.push(number);\n        }\n        const possibleCols = [];\n        for (let number = colStart - 1; number <= colEnd + 1; number += 2) {\n            possibleCols.push(number);\n        }\n        const randomRowIndex = Math.floor(Math.random() * possibleRows.length);\n        const randomColIndex = Math.floor(Math.random() * possibleCols.length);\n        const currentRow = possibleRows[randomRowIndex];\n        const colRandom = possibleCols[randomColIndex];\n        const unvisitedNodes = getAllNodes(grid);\n        while (unvisitedNodes.length) {\n            const closestNode = unvisitedNodes.shift();\n            const r = parseInt(closestNode.id.split(\"-\")[0]);\n            const c = parseInt(closestNode.id.split(\"-\")[1]);\n            if (r === currentRow && c !== colRandom && c >= colStart - 1 && c <= colEnd + 1) {\n                if (!closestNode.isStart && !closestNode.isFinish) {\n                    closestNode.isWall = true;\n                    wallsToAnimate.push(closestNode);\n                }\n\n            }\n        }\n        if (currentRow - 2 - rowStart > colEnd - colStart) {\n            horizontalMaze(grid, rowStart, currentRow - 2, colStart, colEnd, orientation, surroundingWalls, wallsToAnimate);\n        } else {\n            horizontalMaze(grid, rowStart, currentRow - 2, colStart, colEnd, \"horizontal\", surroundingWalls, wallsToAnimate)\n        }\n        if (rowEnd - (currentRow + 2) > colEnd - colStart) {\n            horizontalMaze(grid, currentRow + 2, rowEnd, colStart, colEnd, orientation, surroundingWalls, wallsToAnimate);\n        } else {\n            horizontalMaze(grid, currentRow + 2, rowEnd, colStart, colEnd, \"vertical\", surroundingWalls, wallsToAnimate);\n        }\n    } else {// if (orientation === \"vertical\") {\n        const possibleCols = [];\n        for (let number = colStart; number <= colEnd; number += 2) {\n            possibleCols.push(number);\n        }\n        const possibleRows = [];\n        for (let number = rowStart - 1; number <= rowEnd + 1; number += 2) {\n            possibleRows.push(number);\n        }\n        const randomColIndex = Math.floor(Math.random() * possibleCols.length);\n        const randomRowIndex = Math.floor(Math.random() * possibleRows.length);\n        const currentCol = possibleCols[randomColIndex];\n        const rowRandom = possibleRows[randomRowIndex];\n        const unvisitedNodes = getAllNodes(grid);\n        while (unvisitedNodes.length) {\n            const closestNode = unvisitedNodes.shift();\n            const r = parseInt(closestNode.id.split(\"-\")[0]);\n            const c = parseInt(closestNode.id.split(\"-\")[1]);\n            if (c === currentCol && r !== rowRandom && r >= rowStart - 1 && r <= rowEnd + 1) {\n                if (!closestNode.isStart && !closestNode.isFinish) {\n                    closestNode.isWall = true;\n                    wallsToAnimate.push(closestNode);\n                }\n            }\n        }\n        if (rowEnd - rowStart > currentCol - 2 - colStart) {\n            horizontalMaze(grid, rowStart, rowEnd, colStart, currentCol - 2, \"horizontal\", surroundingWalls, wallsToAnimate);\n        } else {\n            horizontalMaze(grid, rowStart, rowEnd, colStart, currentCol - 2, \"horizontal\", surroundingWalls, wallsToAnimate);\n        }\n        if (rowEnd - rowStart > colEnd - (currentCol + 2)) {\n            horizontalMaze(grid, rowStart, rowEnd, currentCol + 2, colEnd, \"horizontal\", surroundingWalls, wallsToAnimate);\n        } else {\n            horizontalMaze(grid, rowStart, rowEnd, currentCol + 2, colEnd, orientation, surroundingWalls, wallsToAnimate);\n        }\n    }\n\n    return wallsToAnimate;\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}","export function verticalMaze(grid, rowStart, rowEnd, colStart, colEnd, orientation, surroundingWalls, wallsToAnimate) {\n    // const wallsToAnimate = [];\n\n    if (rowEnd < rowStart || colEnd < colStart) {\n        return wallsToAnimate;\n    }\n\n    if (!surroundingWalls) {\n        const unvisitedNodes = getAllNodes(grid);\n        while (unvisitedNodes.length) {\n            const closestNode = unvisitedNodes.shift();\n            const r = parseInt(closestNode.id.split(\"-\")[0]);\n            const c = parseInt(closestNode.id.split(\"-\")[1]);\n            if (r === 0 || c === 0 || c === grid[0].length - 1 || r === grid.length - 1) {\n                //   let currentNode = document.getElementById(closestNode);\n                //   wallsToAnimate.push(currentNode);\n                closestNode.isWall = true;\n                wallsToAnimate.push(closestNode);\n            }\n\n\n        }\n        surroundingWalls = true;\n    }\n    if (orientation === \"horizontal\") {\n        const possibleRows = [];\n        for (let number = rowStart; number <= rowEnd; number += 2) {\n            possibleRows.push(number);\n        }\n        const possibleCols = [];\n        for (let number = colStart - 1; number <= colEnd + 1; number += 2) {\n            possibleCols.push(number);\n        }\n        const randomRowIndex = Math.floor(Math.random() * possibleRows.length);\n        const randomColIndex = Math.floor(Math.random() * possibleCols.length);\n        //    const randomColIndex2 = Math.floor(Math.random() * possibleRows.length);\n        const currentRow = possibleRows[randomRowIndex];\n        const colRandom = possibleCols[randomColIndex];\n        //    const colRandom2 = possibleCols[randomColIndex2];\n        const unvisitedNodes = getAllNodes(grid);\n        while (unvisitedNodes.length) {\n            const closestNode = unvisitedNodes.shift();\n            const r = parseInt(closestNode.id.split(\"-\")[0]);\n            const c = parseInt(closestNode.id.split(\"-\")[1]);\n            if (r === currentRow && c !== colRandom && c >= colStart - 1 && c <= colEnd + 1) {\n                if (!closestNode.isStart && !closestNode.isFinish) {\n                    closestNode.isWall = true;\n                    wallsToAnimate.push(closestNode);\n                }\n\n            }\n        }\n        if (currentRow - 2 - rowStart > colEnd - colStart) {\n            verticalMaze(grid, rowStart, currentRow - 2, colStart, colEnd, orientation, surroundingWalls, wallsToAnimate);\n        } else {\n            verticalMaze(grid, rowStart, currentRow - 2, colStart, colEnd, \"vertical\", surroundingWalls, wallsToAnimate)\n        }\n        if (rowEnd - (currentRow + 2) > colEnd - colStart) {\n            verticalMaze(grid, currentRow + 2, rowEnd, colStart, colEnd, \"vertical\", surroundingWalls, wallsToAnimate);\n        } else {\n            verticalMaze(grid, currentRow + 2, rowEnd, colStart, colEnd, \"vertical\", surroundingWalls, wallsToAnimate);\n        }\n    } else {// if (orientation === \"vertical\") {\n        const possibleCols = [];\n        for (let number = colStart; number <= colEnd; number += 2) {\n            possibleCols.push(number);\n        }\n        const possibleRows = [];\n        for (let number = rowStart - 1; number <= rowEnd + 1; number += 2) {\n            possibleRows.push(number);\n        }\n        const randomColIndex = Math.floor(Math.random() * possibleCols.length);\n        const randomRowIndex = Math.floor(Math.random() * possibleRows.length);\n        const currentCol = possibleCols[randomColIndex];\n        const rowRandom = possibleRows[randomRowIndex];\n        const unvisitedNodes = getAllNodes(grid);\n        while (unvisitedNodes.length) {\n            const closestNode = unvisitedNodes.shift();\n            const r = parseInt(closestNode.id.split(\"-\")[0]);\n            const c = parseInt(closestNode.id.split(\"-\")[1]);\n            if (c === currentCol && r !== rowRandom && r >= rowStart - 1 && r <= rowEnd + 1) {\n                if (!closestNode.isStart && !closestNode.isFinish) {\n                    closestNode.isWall = true;\n                    wallsToAnimate.push(closestNode);\n                }\n            }\n        }\n        if (rowEnd - rowStart > currentCol - 2 - colStart) {\n            verticalMaze(grid, rowStart, rowEnd, colStart, currentCol - 2, \"vertical\", surroundingWalls, wallsToAnimate);\n        } else {\n            verticalMaze(grid, rowStart, rowEnd, colStart, currentCol - 2, orientation, surroundingWalls, wallsToAnimate);\n        }\n        if (rowEnd - rowStart > colEnd - (currentCol + 2)) {\n            verticalMaze(grid, rowStart, rowEnd, currentCol + 2, colEnd, \"horizontal\", surroundingWalls, wallsToAnimate);\n        } else {\n            verticalMaze(grid, rowStart, rowEnd, currentCol + 2, colEnd, orientation, surroundingWalls, wallsToAnimate);\n        }\n    }\n\n    return wallsToAnimate;\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}","import React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../Algorithms/Dijkstra';\nimport { dfs } from '../Algorithms/Dfs';\nimport { astar, getNodesInShortestAstar } from '../Algorithms/astar';\nimport { bfs } from '../Algorithms/Bfs';\nimport { Nav, Navbar, NavDropdown, Form, FormControl, Button } from 'react-bootstrap';\nimport { getInitialGrid, getNewGridWithWalToggled } from './Board/board';\nimport './PathfindingVisualizer.css';\nimport { simpleMaze } from '../Maze/simpleMaze';\nimport { recursiveMaze } from '../Maze/recursiveMaze';\nimport { horizontalMaze } from '../Maze/horizontalMaze';\nimport { verticalMaze } from '../Maze/verticalMaze';\nimport styled from 'styled-components';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport RangeSlider from 'react-bootstrap-range-slider';\n\n\nconst vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)\nconst vh = Math.min(document.documentElement.clientHeight || 0, window.innerHeight || 0)\nconst height = Math.floor(vh / 28) - 8;\nconst width = Math.floor(vw / 25);\nconst START_NODE_ROW = 5;//10;\nconst START_NODE_COL = 5;//15;\nconst FINISH_NODE_ROW = height - 6;\nconst FINISH_NODE_COL = width - 6;\n//const VISIT_SPEED = 10;\nconst PATH_SPEED = 30;\n\n//const height = 25;\n//const width = 40;\n\n\nexport default class PathfindingVisualizer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            grid: [],\n            START_NODE_ROW: 5,\n            START_NODE_COL: 5,\n            mouseIsPressed: false,\n            VISIT_SPEED: 10,\n            PATH_SPEED: 30,\n        };\n    }\n\n    componentDidMount() {\n        const grid = getInitialGrid(height, width);\n        this.setState({ grid });\n    }\n\n    handleMouseDown(row, col) {\n        const newGrid = getNewGridWithWalToggled(this.state.grid, row, col);\n        this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n\n    handleMouseEnter(row, col) {\n        if (!this.state.mouseIsPressed) return;\n        const newGrid = getNewGridWithWalToggled(this.state.grid, row, col);\n        this.setState({ grid: newGrid });\n    }\n\n    handleMouseUp() {\n        this.setState({ mouseIsPressed: false });\n    }\n\n\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n        for (let i = 0; i < visitedNodesInOrder.length - 1; i++) {\n            const node = visitedNodesInOrder[i];\n            if (i == 0) {\n                document.getElementById(`${node.row}-${node.col}`).className =\n                    'node node-visit-start';\n            }\n            else if (i > 0) {\n                setTimeout(() => {\n                    document.getElementById(`${node.row}-${node.col}`).className =\n                        'node node-visited';\n                }, this.state.VISIT_SPEED * i);\n            }\n            if (i === visitedNodesInOrder.length - 2) {\n                setTimeout(() => {\n                    this.animateShortestPath(nodesInShortestPathOrder);\n                }, this.state.VISIT_SPEED * i);\n                return;\n            }\n        }\n    }\n\n    animateAstar(visitedNodesInOrder, nodesInShortestPathOrder) {\n        for (let i = 0; i < visitedNodesInOrder.length - 1; i++) {\n            const node = visitedNodesInOrder[i];\n            if (i == 0) {\n                document.getElementById(`${node.row}-${node.col}`).className =\n                    'node node-visit-start';\n            }\n            else if (i > 0) {\n                ///     else if (i >= 1 && i < nodesInShortestPathOrder.length - 1) {\n                setTimeout(() => {\n                    document.getElementById(`${node.row}-${node.col}`).className =\n                        'node node-visited';\n                }, this.state.VISIT_SPEED * i);\n            }\n            /*\n            else if (i == nodesInShortestPathOrder.length - 1) {\n                setTimeout(() => {\n                    document.getElementById(`${node.row}-${node.col}`).className =\n                        'node node-visit-finish';\n                }, 10 * i);\n            }\n            */\n            if (i == visitedNodesInOrder.length - 2) {\n                setTimeout(() => {\n                    this.animateShortestPath(nodesInShortestPathOrder);\n                }, this.state.VISIT_SPEED * i);\n                return;\n            }\n            if (node.isVisited) {\n                console.log(\"find\");\n            }\n        }\n    }\n\n    animateDfs(visitedNodesInOrder/*, nodesInShortestPathOrder*/) {\n        //console.log(visitedNodesInOrder.length);\n        for (let i = 1; i < visitedNodesInOrder.length - 1; i++) {\n            const node = visitedNodesInOrder[i];\n            setTimeout(() => {\n\n                document.getElementById(`${node.row}-${node.col}`).className =\n                    'node node-visited';\n            }, this.state.VISIT_SPEED * i);\n        }\n    }\n\n    animateShortestPath(nodesInShortestPathOrder) {\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n            const node = nodesInShortestPathOrder[i];\n            if (i == 0) {\n                document.getElementById(`${node.row}-${node.col}`).className =\n                    'node node-Real-start';\n            }\n            else if (i >= 1 && i < nodesInShortestPathOrder.length - 1) {\n                setTimeout(() => {\n                    document.getElementById(`${node.row}-${node.col}`).className =\n                        'node node-shortest-path';\n                }, PATH_SPEED * i);\n            }\n            else {// if (i == nodesInShortestPathOrder.length - 1) {\n                setTimeout(() => {\n                    document.getElementById(`${node.row}-${node.col}`).className =\n                        'node node-Real-finish';\n                }, PATH_SPEED * i);\n            }\n        }\n    }\n\n    animateMaze(wallsToAnimate) {\n        for (let i = 0; i < wallsToAnimate.length; i++) {\n            const node = wallsToAnimate[i];\n            setTimeout(() => {\n                document.getElementById(`${node.row}-${node.col}`).className =\n                    'node node-wall';\n            }, this.state.VISIT_SPEED * i);\n        }\n    }\n\n    visualizeDijkstra() {\n        const { grid } = this.state;\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    visualizeDfs() {\n        const { grid } = this.state;\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n        const visitedNodesInOrder = dfs(grid, startNode, finishNode);\n        //  const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDfs(visitedNodesInOrder/*, nodesInShortestPathOrder*/);\n    }\n\n    visualizeAstar() {\n        const { grid } = this.state;\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n        const visitedNodesInOrder = astar(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestAstar(finishNode);\n        this.animateAstar(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    visualizeMaze() {\n        const { grid } = this.state;\n        const wallsToAnimate = simpleMaze(grid);\n        this.animateMaze(wallsToAnimate);\n    }\n\n    visualizeRecursiveMaze() {\n        const { grid } = this.state;\n        const wallsToAnimate = [];\n        const surroundingWalls = false;\n        const orientation = \"horizontal\";\n        const wallAnimate = recursiveMaze(grid, 2, grid.length - 3, 2, grid[0].length - 3, orientation, surroundingWalls, wallsToAnimate);\n        this.animateMaze(wallAnimate);\n    }\n\n    visualizeHorizontalMaze() {\n        const { grid } = this.state;\n        const wallsToAnimate = [];\n        const surroundingWalls = false;\n        const orientation = \"horizontal\";\n        const wallAnimate = horizontalMaze(grid, 2, grid.length - 3, 2, grid[0].length - 3, orientation, surroundingWalls, wallsToAnimate);\n        this.animateMaze(wallAnimate);\n    }\n\n    visualizeVerticalMaze() {\n        const { grid } = this.state;\n        const wallsToAnimate = [];\n        const surroundingWalls = false;\n        const orientation = \"vertical\";\n        const wallAnimate = verticalMaze(grid, 2, grid.length - 3, 2, grid[0].length - 3, orientation, surroundingWalls, wallsToAnimate);\n        this.animateMaze(wallAnimate);\n    }\n\n    //  export function recursiveMaze(grid, rowStart, rowEnd, colStart, colEnd, surroundingWalls, wallsToAnimate) {\n\n\n    clearPath() {\n        const { grid } = this.state;\n\n        for (const row of grid) {\n            for (const col of row) {\n                col.isVisited = false;\n                col.distance = Infinity;\n                col.totalDistance = Infinity;\n                col.heuristicDistance = null;\n                col.direction = null;\n                col.previousNode = null;\n                //      if (!col.isStart && !col.isFinish && !col.isWall) {\n                document.getElementById(`${col.row}-${col.col}`).className =\n                    'node node-unvisited';\n                //     }\n                if (col.isStart) {\n                    document.getElementById(`${col.row}-${col.col}`).className =\n                        'node node-start';\n                }\n                if (col.isFinish) {\n                    document.getElementById(`${col.row}-${col.col}`).className =\n                        'node node-finish';\n                }\n                if (col.isWall) {\n                    document.getElementById(`${col.row}-${col.col}`).className =\n                        'node node-wall';\n                }\n            }\n        }\n\n    }\n\n    clearWall() {\n        const { grid } = this.state;\n        for (const row of grid) {\n            for (const col of row) {\n                if (col.isWall) {\n                    //  console.log(\"find\");\n                    col.isWall = false;\n                    document.getElementById(`${col.row}-${col.col}`).className =\n                        'node node-unvisited';\n                }\n            }\n        }\n        // grid.height\n    }\n\n    clearBoard() {\n        this.clearPath();\n        this.clearWall();\n    }\n\n    getAllNodes(grid) {\n        const nodes = [];\n        for (const row of grid) {\n            for (const node of row) {\n                nodes.push(node);\n            }\n        }\n        return nodes;\n    }\n\n\n\n    render() {\n        const { grid, mouseIsPressed } = this.state;\n\n        return (\n            <>\n                {/* \n                <Navbar bg=\"dark\" variant=\"dark\">\n\n                    <Navbar.Brand href=\"#home\" onClick={() => window.location.reload()}>PathfindingVisualizer</Navbar.Brand>\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n\n                            <Button variant=\"primary\" size='sm' onClick={() => { this.visualizeDijkstra() }}>Visualize Dijkstra's Algorithm\n                            </Button>\n                            <Button variant=\"primary\" onClick={() => this.visualizeDijkstra()}>Visualize BFS's Algorithm\n                            </Button>\n                            <Button variant=\"primary\" onClick={() => this.visualizeAstar()}>Visualize Astar's Algorithm\n                            </Button>\n                            <Button variant=\"primary\" onClick={() => this.visualizeMaze()}>Add Random Maze\n                            </Button>\n                            <Button variant=\"primary\" onClick={() => this.visualizeRecursiveMaze()}>Add Recursive Maze\n                            </Button>\n                            <Button variant=\"primary\" onClick={() => this.visualizeVerticalMaze()}>Add Vertical Maze\n                            </Button>\n                            <Button variant=\"primary\" onClick={() => this.visualizeHorizontalMaze()}>Add Horizontal Maze\n                            </Button>\n                            <Button variant=\"success\" onClick={() => this.clearBoard()} > Generate New Board</Button>\n                            <Button variant=\"success\" onClick={() => this.clearPath()} > Clear Path</Button>\n                            <Button variant=\"success\" onClick={() => this.clearWall()} > Clear Wall</Button>\n\n                        </Nav>\n\n\n                    </Navbar.Collapse>\n\n                </Navbar>\n                */}\n\n                <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand className=\"brandStyle\" href=\"#home\" onClick={() => window.location.reload()}>PathfindingVisualizer</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            <Nav.Link onClick={() => { this.visualizeDijkstra() }}>Visualize Dijkstra's Algorithm</Nav.Link>\n                            <Nav.Link onClick={() => { this.visualizeDijkstra() }}>Visualize BFS's Algorithm</Nav.Link>\n                            <Nav.Link onClick={() => { this.visualizeAstar() }}>Visualize Astar's Algorithm</Nav.Link>\n                            <NavDropdown title=\"Maze\" id=\"collasible-nav-dropdown\">\n                                <NavDropdown.Item onClick={() => this.visualizeMaze()}>Add Random Maze</NavDropdown.Item>\n                                <NavDropdown.Item onClick={() => this.visualizeRecursiveMaze()}>Add Recursive Maze</NavDropdown.Item>\n                                <NavDropdown.Item onClick={() => this.visualizeVerticalMaze()}>Add Vertical Maze</NavDropdown.Item>\n                                <NavDropdown.Item onClick={() => this.visualizeHorizontalMaze()}>Add Horizontal Maze</NavDropdown.Item>\n                                <NavDropdown.Divider />\n                                <NavDropdown.Item >Separated link</NavDropdown.Item>\n                            </NavDropdown>\n                            <Nav.Link eventKey=\"disabled\" disabled>   Animation Speed(ms)</Nav.Link>\n                            <Nav.Link eventKey=\"disabled\" disabled>FAST</Nav.Link>\n\n\n                            <RangeSlider className=\"speed-slider\"\n                                value={this.state.VISIT_SPEED}\n                                min={5}\n                                max={30}\n                                step={1}\n                                tooltipPlacement='bottom'\n                                tooltip={false}\n                                reverse={true}\n\n                                size='sm'\n                                onChange={changeEvent => this.setState({ VISIT_SPEED: changeEvent.target.value })}>\n                            </RangeSlider>\n                            <Nav.Link eventKey=\"disabled\" disabled> SLOW</Nav.Link>\n\n                        </Nav>\n                        <Nav>\n                            <Nav.Link onClick={() => this.clearPath()} > Clear Path</Nav.Link>\n                            <Nav.Link onClick={() => this.clearWall()} > Clear Wall</Nav.Link>\n\n                        </Nav>\n\n\n                    </Navbar.Collapse>\n                </Navbar>\n                <div className=\"grid\">\n                    {grid.map((row, rowIdx) => {\n                        return (\n                            <div key={rowIdx}>\n                                {row.map((node, nodeIdx) => {\n                                    const { row, col, isFinish, isStart, isWall } = node;\n                                    return (\n                                        <Node\n                                            key={nodeIdx}\n                                            col={col}\n                                            row={row}\n                                            isFinish={isFinish}\n                                            isStart={isStart}\n                                            isWall={isWall}\n                                            mouseIsPressed={mouseIsPressed}\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                                            onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                                            onMouseUp={() => this.handleMouseUp()}\n                                        ></Node>\n                                    );\n                                })}\n                            </div>\n                        );\n                    })}\n                </div>\n            </>\n        );\n    }\n}\n\n//getInitialGrid();\n//createNode();\n//getNewGridWithWalToggled();\n\n/*\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n        const currentRow = [];\n        for (let col = 0; col < 50; col++) {\n            currentRow.push(createNode(col, row));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\n\n\nconst createNode = (col, row) => {\n    return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null,\n    };\n};\n\n\nconst getNewGridWithWalToggled = (gird, row, col) => {\n    const newGrid = gird.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n};\n*/","import { Board } from './Board/BoardTest';\nimport React, { Component } from 'react';\n\n\nexport default class TestBoard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n        };\n    }\n\n\n\n    render() {\n        const { grid } = this.state;\n        return (\n            <div className=\"grid\">\n\n\n            </div>\n\n\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\nimport TestBoard from './PathfindingVisualizer/TestBoard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n\n    </div>\n    /*\n  <div className=\"App\">\n    <TestBoard></TestBoard>\n  </div>\n  */\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}